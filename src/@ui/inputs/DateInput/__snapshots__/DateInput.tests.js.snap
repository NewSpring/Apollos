// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The DateInput component should render 1`] = `
<View
  style={
    Object {
      "marginVertical": 20,
    }
  }
>
  <View
    accessibilityComponentType="button"
    accessibilityLabel={undefined}
    accessibilityTraits={
      Array [
        "button",
      ]
    }
    accessible={true}
    collapsable={undefined}
    hasTVPreferredFocus={undefined}
    hitSlop={undefined}
    isTVSelectable={true}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
    testID={undefined}
    tvParallaxProperties={undefined}
  >
    <View
      bordered={false}
      disabled={false}
      pill={false}
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#dddddd",
          "borderColor": "#dddddd",
          "borderRadius": 6,
          "borderWidth": 2,
          "elevation": 2,
          "flexDirection": "row",
          "height": 40,
          "justifyContent": "center",
          "marginBottom": 10,
          "marginRight": 10,
          "marginTop": 5,
          "opacity": 1,
          "overflow": "hidden",
          "paddingHorizontal": 5,
          "paddingVertical": 5,
        }
      }
    />
  </View>
  <Modal
    animationType="none"
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onModalHide={[Function]}
    onRequestClose={[Function]}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    transparent={true}
    visible={false}
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hitSlop={undefined}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "black",
          "bottom": 0,
          "height": 1334,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": 750,
        }
      }
      testID={undefined}
    />
    <View
      collapsable={undefined}
      hideModalContentWhileAnimating={false}
      onModalHide={[Function]}
      pointerEvents="box-none"
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      style={
        Object {
          "flex": 1,
          "justifyContent": "flex-end",
          "margin": 10,
          "transform": Array [
            Object {
              "translateY": 0,
            },
          ],
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeThreshold={100}
    >
      <View
        style={
          Array [
            Object {
              "backgroundColor": "white",
              "borderRadius": 13,
              "marginBottom": 8,
              "overflow": "hidden",
            },
            undefined,
          ]
        }
      >
        <View
          style={
            Object {
              "backgroundColor": "transparent",
              "borderBottomColor": "#d5d5d5",
              "borderBottomWidth": 0.5,
              "padding": 14,
            }
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Array [
                Object {
                  "color": "#8f8f8f",
                  "fontSize": 13,
                  "textAlign": "center",
                },
                undefined,
              ]
            }
          >
            Pick a date
          </Text>
        </View>
        <View
          onStartShouldSetResponderCapture={[Function]}
        >
          <View
            style={undefined}
          >
            <RCTDatePicker
              date={1420070400000}
              locale={undefined}
              maximumDate={undefined}
              minimumDate={1420070400000}
              minuteInterval={1}
              mode="date"
              onChange={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "height": 216,
                }
              }
              timeZoneOffsetInMinutes={undefined}
            />
          </View>
        </View>
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "backgroundColor": "transparent",
              "borderColor": "#d5d5d5",
              "borderTopWidth": 0.5,
              "height": 57,
              "justifyContent": "center",
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Array [
                Object {
                  "backgroundColor": "transparent",
                  "color": "#007ff9",
                  "fontSize": 20,
                  "fontWeight": "normal",
                  "textAlign": "center",
                },
                undefined,
              ]
            }
          >
            Confirm
          </Text>
        </View>
      </View>
      <View
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        hasTVPreferredFocus={undefined}
        hitSlop={undefined}
        isTVSelectable={true}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "white",
            "borderRadius": 13,
            "height": 57,
            "justifyContent": "center",
            "marginBottom": 0,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
                "color": "#007ff9",
                "fontSize": 20,
                "fontWeight": "600",
                "padding": 10,
                "textAlign": "center",
              },
              undefined,
            ]
          }
        >
          Cancel
        </Text>
      </View>
    </View>
  </Modal>
</View>
`;

exports[`The DateInput component should render with a displayValue 1`] = `
<View
  style={
    Object {
      "marginVertical": 20,
    }
  }
>
  <View
    accessibilityComponentType="button"
    accessibilityLabel={undefined}
    accessibilityTraits={
      Array [
        "button",
      ]
    }
    accessible={true}
    collapsable={undefined}
    hasTVPreferredFocus={undefined}
    hitSlop={undefined}
    isTVSelectable={true}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
    testID={undefined}
    tvParallaxProperties={undefined}
  >
    <View
      bordered={false}
      disabled={false}
      pill={false}
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#dddddd",
          "borderColor": "#dddddd",
          "borderRadius": 6,
          "borderWidth": 2,
          "elevation": 2,
          "flexDirection": "row",
          "height": 40,
          "justifyContent": "center",
          "marginBottom": 10,
          "marginRight": 10,
          "marginTop": 5,
          "opacity": 1,
          "overflow": "hidden",
          "paddingHorizontal": 5,
          "paddingVertical": 5,
        }
      }
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Object {
            "alignItems": "center",
            "color": "#303030",
            "fontFamily": "Colfax-Bold",
            "fontSize": 15.75,
            "justifyContent": "center",
            "lineHeight": 17.75,
            "paddingBottom": 1.8,
            "paddingHorizontal": 6,
            "paddingTop": 4.5,
            "textAlign": "center",
          }
        }
        withIcon={undefined}
      >
        2015/01/01
      </Text>
    </View>
  </View>
  <Modal
    animationType="none"
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onModalHide={[Function]}
    onRequestClose={[Function]}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    transparent={true}
    visible={false}
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hitSlop={undefined}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "black",
          "bottom": 0,
          "height": 1334,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": 750,
        }
      }
      testID={undefined}
    />
    <View
      collapsable={undefined}
      hideModalContentWhileAnimating={false}
      onModalHide={[Function]}
      pointerEvents="box-none"
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      style={
        Object {
          "flex": 1,
          "justifyContent": "flex-end",
          "margin": 10,
          "transform": Array [
            Object {
              "translateY": 0,
            },
          ],
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeThreshold={100}
    >
      <View
        style={
          Array [
            Object {
              "backgroundColor": "white",
              "borderRadius": 13,
              "marginBottom": 8,
              "overflow": "hidden",
            },
            undefined,
          ]
        }
      >
        <View
          style={
            Object {
              "backgroundColor": "transparent",
              "borderBottomColor": "#d5d5d5",
              "borderBottomWidth": 0.5,
              "padding": 14,
            }
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Array [
                Object {
                  "color": "#8f8f8f",
                  "fontSize": 13,
                  "textAlign": "center",
                },
                undefined,
              ]
            }
          >
            Pick a date
          </Text>
        </View>
        <View
          onStartShouldSetResponderCapture={[Function]}
        >
          <View
            style={undefined}
          >
            <RCTDatePicker
              date={1420070400000}
              locale={undefined}
              maximumDate={undefined}
              minimumDate={1420070400000}
              minuteInterval={1}
              mode="date"
              onChange={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "height": 216,
                }
              }
              timeZoneOffsetInMinutes={undefined}
            />
          </View>
        </View>
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "backgroundColor": "transparent",
              "borderColor": "#d5d5d5",
              "borderTopWidth": 0.5,
              "height": 57,
              "justifyContent": "center",
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Array [
                Object {
                  "backgroundColor": "transparent",
                  "color": "#007ff9",
                  "fontSize": 20,
                  "fontWeight": "normal",
                  "textAlign": "center",
                },
                undefined,
              ]
            }
          >
            Confirm
          </Text>
        </View>
      </View>
      <View
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        hasTVPreferredFocus={undefined}
        hitSlop={undefined}
        isTVSelectable={true}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "white",
            "borderRadius": 13,
            "height": 57,
            "justifyContent": "center",
            "marginBottom": 0,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
                "color": "#007ff9",
                "fontSize": 20,
                "fontWeight": "600",
                "padding": 10,
                "textAlign": "center",
              },
              undefined,
            ]
          }
        >
          Cancel
        </Text>
      </View>
    </View>
  </Modal>
  <View
    collapsable={undefined}
    onLayout={[Function]}
    pointerEvents="none"
    style={
      Object {
        "bottom": 0,
        "justifyContent": "center",
        "opacity": 0.8,
        "position": "absolute",
        "top": 0,
        "transform": Array [
          Object {
            "scale": 0.8,
          },
          Object {
            "translateX": 0,
          },
          Object {
            "translateY": 0,
          },
        ],
      }
    }
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      style={
        Object {
          "backgroundColor": "transparent",
          "color": "#505050",
          "fontFamily": "Colfax-Bold",
          "fontSize": 15.75,
          "lineHeight": 17.75,
          "paddingBottom": 1.8,
          "paddingTop": 4.5,
          "paddingVertical": 5,
        }
      }
    />
  </View>
</View>
`;

exports[`The DateInput component should render with a label 1`] = `
<View
  style={
    Object {
      "marginVertical": 20,
    }
  }
>
  <View
    accessibilityComponentType="button"
    accessibilityLabel={undefined}
    accessibilityTraits={
      Array [
        "button",
      ]
    }
    accessible={true}
    collapsable={undefined}
    hasTVPreferredFocus={undefined}
    hitSlop={undefined}
    isTVSelectable={true}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
    testID={undefined}
    tvParallaxProperties={undefined}
  >
    <View
      bordered={false}
      disabled={false}
      pill={false}
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#dddddd",
          "borderColor": "#dddddd",
          "borderRadius": 6,
          "borderWidth": 2,
          "elevation": 2,
          "flexDirection": "row",
          "height": 40,
          "justifyContent": "center",
          "marginBottom": 10,
          "marginRight": 10,
          "marginTop": 5,
          "opacity": 1,
          "overflow": "hidden",
          "paddingHorizontal": 5,
          "paddingVertical": 5,
        }
      }
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Object {
            "alignItems": "center",
            "color": "#303030",
            "fontFamily": "Colfax-Bold",
            "fontSize": 15.75,
            "justifyContent": "center",
            "lineHeight": 17.75,
            "paddingBottom": 1.8,
            "paddingHorizontal": 6,
            "paddingTop": 4.5,
            "textAlign": "center",
          }
        }
        withIcon={undefined}
      >
        2015/01/01
      </Text>
    </View>
  </View>
  <Modal
    animationType="none"
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onModalHide={[Function]}
    onRequestClose={[Function]}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    transparent={true}
    visible={false}
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hitSlop={undefined}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "black",
          "bottom": 0,
          "height": 1334,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": 750,
        }
      }
      testID={undefined}
    />
    <View
      collapsable={undefined}
      hideModalContentWhileAnimating={false}
      onModalHide={[Function]}
      pointerEvents="box-none"
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      style={
        Object {
          "flex": 1,
          "justifyContent": "flex-end",
          "margin": 10,
          "transform": Array [
            Object {
              "translateY": 0,
            },
          ],
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeThreshold={100}
    >
      <View
        style={
          Array [
            Object {
              "backgroundColor": "white",
              "borderRadius": 13,
              "marginBottom": 8,
              "overflow": "hidden",
            },
            undefined,
          ]
        }
      >
        <View
          style={
            Object {
              "backgroundColor": "transparent",
              "borderBottomColor": "#d5d5d5",
              "borderBottomWidth": 0.5,
              "padding": 14,
            }
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Array [
                Object {
                  "color": "#8f8f8f",
                  "fontSize": 13,
                  "textAlign": "center",
                },
                undefined,
              ]
            }
          >
            Pick a date
          </Text>
        </View>
        <View
          onStartShouldSetResponderCapture={[Function]}
        >
          <View
            style={undefined}
          >
            <RCTDatePicker
              date={1420070400000}
              locale={undefined}
              maximumDate={undefined}
              minimumDate={1420070400000}
              minuteInterval={1}
              mode="date"
              onChange={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "height": 216,
                }
              }
              timeZoneOffsetInMinutes={undefined}
            />
          </View>
        </View>
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "backgroundColor": "transparent",
              "borderColor": "#d5d5d5",
              "borderTopWidth": 0.5,
              "height": 57,
              "justifyContent": "center",
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Array [
                Object {
                  "backgroundColor": "transparent",
                  "color": "#007ff9",
                  "fontSize": 20,
                  "fontWeight": "normal",
                  "textAlign": "center",
                },
                undefined,
              ]
            }
          >
            Confirm
          </Text>
        </View>
      </View>
      <View
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        hasTVPreferredFocus={undefined}
        hitSlop={undefined}
        isTVSelectable={true}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "white",
            "borderRadius": 13,
            "height": 57,
            "justifyContent": "center",
            "marginBottom": 0,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
                "color": "#007ff9",
                "fontSize": 20,
                "fontWeight": "600",
                "padding": 10,
                "textAlign": "center",
              },
              undefined,
            ]
          }
        >
          Cancel
        </Text>
      </View>
    </View>
  </Modal>
  <View
    collapsable={undefined}
    onLayout={[Function]}
    pointerEvents="none"
    style={
      Object {
        "bottom": 0,
        "justifyContent": "center",
        "opacity": 0.8,
        "position": "absolute",
        "top": 0,
        "transform": Array [
          Object {
            "scale": 0.8,
          },
          Object {
            "translateX": 0,
          },
          Object {
            "translateY": 0,
          },
        ],
      }
    }
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      style={
        Object {
          "backgroundColor": "transparent",
          "color": "#505050",
          "fontFamily": "Colfax-Bold",
          "fontSize": 15.75,
          "lineHeight": 17.75,
          "paddingBottom": 1.8,
          "paddingTop": 4.5,
          "paddingVertical": 5,
        }
      }
    >
      Date Label
    </Text>
  </View>
</View>
`;

exports[`The DateInput component should render with a placeholder 1`] = `
<View
  style={
    Object {
      "marginVertical": 20,
    }
  }
>
  <View
    accessibilityComponentType="button"
    accessibilityLabel={undefined}
    accessibilityTraits={
      Array [
        "button",
      ]
    }
    accessible={true}
    collapsable={undefined}
    hasTVPreferredFocus={undefined}
    hitSlop={undefined}
    isTVSelectable={true}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
    testID={undefined}
    tvParallaxProperties={undefined}
  >
    <View
      bordered={false}
      disabled={false}
      pill={false}
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#dddddd",
          "borderColor": "#dddddd",
          "borderRadius": 6,
          "borderWidth": 2,
          "elevation": 2,
          "flexDirection": "row",
          "height": 40,
          "justifyContent": "center",
          "marginBottom": 10,
          "marginRight": 10,
          "marginTop": 5,
          "opacity": 1,
          "overflow": "hidden",
          "paddingHorizontal": 5,
          "paddingVertical": 5,
        }
      }
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Object {
            "alignItems": "center",
            "color": "#303030",
            "fontFamily": "Colfax-Bold",
            "fontSize": 15.75,
            "justifyContent": "center",
            "lineHeight": 17.75,
            "paddingBottom": 1.8,
            "paddingHorizontal": 6,
            "paddingTop": 4.5,
            "textAlign": "center",
          }
        }
        withIcon={undefined}
      >
        mm/dd/yyyy
      </Text>
    </View>
  </View>
  <Modal
    animationType="none"
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onModalHide={[Function]}
    onRequestClose={[Function]}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    transparent={true}
    visible={false}
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hitSlop={undefined}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "black",
          "bottom": 0,
          "height": 1334,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": 750,
        }
      }
      testID={undefined}
    />
    <View
      collapsable={undefined}
      hideModalContentWhileAnimating={false}
      onModalHide={[Function]}
      pointerEvents="box-none"
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      style={
        Object {
          "flex": 1,
          "justifyContent": "flex-end",
          "margin": 10,
          "transform": Array [
            Object {
              "translateY": 0,
            },
          ],
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeThreshold={100}
    >
      <View
        style={
          Array [
            Object {
              "backgroundColor": "white",
              "borderRadius": 13,
              "marginBottom": 8,
              "overflow": "hidden",
            },
            undefined,
          ]
        }
      >
        <View
          style={
            Object {
              "backgroundColor": "transparent",
              "borderBottomColor": "#d5d5d5",
              "borderBottomWidth": 0.5,
              "padding": 14,
            }
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Array [
                Object {
                  "color": "#8f8f8f",
                  "fontSize": 13,
                  "textAlign": "center",
                },
                undefined,
              ]
            }
          >
            Pick a date
          </Text>
        </View>
        <View
          onStartShouldSetResponderCapture={[Function]}
        >
          <View
            style={undefined}
          >
            <RCTDatePicker
              date={1420070400000}
              locale={undefined}
              maximumDate={undefined}
              minimumDate={1420070400000}
              minuteInterval={1}
              mode="date"
              onChange={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "height": 216,
                }
              }
              timeZoneOffsetInMinutes={undefined}
            />
          </View>
        </View>
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "backgroundColor": "transparent",
              "borderColor": "#d5d5d5",
              "borderTopWidth": 0.5,
              "height": 57,
              "justifyContent": "center",
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Array [
                Object {
                  "backgroundColor": "transparent",
                  "color": "#007ff9",
                  "fontSize": 20,
                  "fontWeight": "normal",
                  "textAlign": "center",
                },
                undefined,
              ]
            }
          >
            Confirm
          </Text>
        </View>
      </View>
      <View
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        hasTVPreferredFocus={undefined}
        hitSlop={undefined}
        isTVSelectable={true}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "white",
            "borderRadius": 13,
            "height": 57,
            "justifyContent": "center",
            "marginBottom": 0,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
                "color": "#007ff9",
                "fontSize": 20,
                "fontWeight": "600",
                "padding": 10,
                "textAlign": "center",
              },
              undefined,
            ]
          }
        >
          Cancel
        </Text>
      </View>
    </View>
  </Modal>
  <View
    collapsable={undefined}
    onLayout={[Function]}
    pointerEvents="none"
    style={
      Object {
        "bottom": 0,
        "justifyContent": "center",
        "opacity": 0.8,
        "position": "absolute",
        "top": 0,
        "transform": Array [
          Object {
            "scale": 0.8,
          },
          Object {
            "translateX": 0,
          },
          Object {
            "translateY": 0,
          },
        ],
      }
    }
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      style={
        Object {
          "backgroundColor": "transparent",
          "color": "#505050",
          "fontFamily": "Colfax-Bold",
          "fontSize": 15.75,
          "lineHeight": 17.75,
          "paddingBottom": 1.8,
          "paddingTop": 4.5,
          "paddingVertical": 5,
        }
      }
    />
  </View>
</View>
`;
